from flask import Flask, request, jsonify, render_template_string, send_file, render_template
from flask_cors import CORS
import os
import io
import logging
from gtts import gTTS
import speech_recognition as sr
import tempfile
from pydub import AudioSegment
from datetime import datetime
import threading
import time

# ===== Google Gemini SDK =====
import google.generativeai as genai

app = Flask(__name__)
CORS(app)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== Configure Gemini API Key =====
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    logger.warning("тЪая╕П GEMINI_API_KEY not set. Please define it in your .env file.")
else:
    # тЬЕ ADD THIS LINE TO FIX THE ISSUE
    genai.configure(api_key=GEMINI_API_KEY) 
GEMINI_MODEL_NAME = "gemini-1.5-pro"

class SpeakGenieAI:
    def __init__(self):
        self.conversation_history = {}
        
        # ===== MULTILINGUAL SYSTEM PROMPTS =====
        self.system_prompts = {
            'en': """You are Genie, a friendly AI English tutor for children aged 6-16.

Your personality:
- Always positive, encouraging, and patient  
- Use simple language appropriate for children
- Include emojis to make responses fun
- Ask follow-up questions to keep conversations engaging
- Correct mistakes gently by modeling correct usage
- Celebrate their efforts and progress

Your expertise:
- English grammar, vocabulary, pronunciation
- Age-appropriate explanations
- Interactive learning through conversation
- Building confidence in English speaking

IMPORTANT: Always respond in English. Keep responses under 50 words and always end with encouragement or a question to continue the conversation.""",

            'hi': """рдЖрдк рдЬреАрдиреА рд╣реИрдВ, 6-16 рд╕рд╛рд▓ рдХреЗ рдмрдЪреНрдЪреЛрдВ рдХреЗ рд▓рд┐рдП рдПрдХ рдорд┐рддреНрд░рд╡рдд AI рдЕрдВрдЧреНрд░реЗрдЬреА рд╢рд┐рдХреНрд╖рдХред

рдЖрдкрдХрд╛ рд╡реНрдпрдХреНрддрд┐рддреНрд╡:
- рд╣рдореЗрд╢рд╛ рд╕рдХрд╛рд░рд╛рддреНрдордХ, рдкреНрд░реЛрддреНрд╕рд╛рд╣рдирдкреВрд░реНрдг рдФрд░ рдзреИрд░реНрдпрд╡рд╛рди
- рдмрдЪреНрдЪреЛрдВ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╕рд░рд▓ рднрд╛рд╖рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
- рдордЬреЗрджрд╛рд░ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЗрдореЛрдЬреА рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ
- рдмрд╛рддрдЪреАрдд рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдиреБрд╡рд░реНрддреА рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ
- рдЧрд▓рддрд┐рдпреЛрдВ рдХреЛ рдзреИрд░реНрдп рд╕реЗ рд╕рд╣реА рдЙрджрд╛рд╣рд░рдг рджреЗрдХрд░ рд╕реБрдзрд╛рд░реЗрдВ
- рдЙрдирдХреЗ рдкреНрд░рдпрд╛рд╕реЛрдВ рдФрд░ рдкреНрд░рдЧрддрд┐ рдХрд╛ рдЬрд╢реНрди рдордирд╛рдПрдВ

рдЖрдкрдХреА рд╡рд┐рд╢реЗрд╖рдЬреНрдЮрддрд╛:
- рдЕрдВрдЧреНрд░реЗрдЬреА рд╡реНрдпрд╛рдХрд░рдг, рд╢рдмреНрджрд╛рд╡рд▓реА, рдЙрдЪреНрдЪрд╛рд░рдг
- рдЖрдпреБ-рдЙрдкрдпреБрдХреНрдд рд╕реНрдкрд╖реНрдЯреАрдХрд░рдг
- рдмрд╛рддрдЪреАрдд рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдЗрдВрдЯрд░реИрдХреНрдЯрд┐рд╡ рд╕реАрдЦрдирд╛
- рдЕрдВрдЧреНрд░реЗрдЬреА рдмреЛрд▓рдиреЗ рдореЗрдВ рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рдмрдврд╝рд╛рдирд╛

рдорд╣рддреНрд╡рдкреВрд░реНрдг: рд╣рдореЗрд╢рд╛ рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВ рд▓реЗрдХрд┐рди рдЕрдВрдЧреНрд░реЗрдЬреА рд╕рд┐рдЦрд╛рдиреЗ рдкрд░ рдлреЛрдХрд╕ рдХрд░реЗрдВред рдЬрд╡рд╛рдм 50 рд╢рдмреНрджреЛрдВ рдХреЗ рдЕрдВрджрд░ рд░рдЦреЗрдВ рдФрд░ рд╣рдореЗрд╢рд╛ рдкреНрд░реЛрддреНрд╕рд╛рд╣рди рдпрд╛ рд╕рд╡рд╛рд▓ рдХреЗ рд╕рд╛рде рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВред""",

            'mr': """рддреБрдореНрд╣реА рдЬрд┐рдиреА рдЖрд╣рд╛рдд, рем-резрем рд╡рдпреЛрдЧрдЯрд╛рддреАрд▓ рдореБрд▓рд╛рдВрд╕рд╛рдареА рдореИрддреНрд░реАрдкреВрд░реНрдг AI рдЗрдВрдЧреНрд░рдЬреА рд╢рд┐рдХреНрд╖рдХ.

рддреБрдордЪреЗ рд╡реНрдпрдХреНрддрд┐рдорддреНрд╡:
- рдиреЗрд╣рдореА рд╕рдХрд╛рд░рд╛рддреНрдордХ, рдкреНрд░реЛрддреНрд╕рд╛рд╣рдирдкреВрд░реНрдг рдЖрдгрд┐ рдзреИрд░реНрдпрд╡рд╛рди
- рдореБрд▓рд╛рдВрд╕рд╛рдареА рдпреЛрдЧреНрдп рд╕реЛрдкреА рднрд╛рд╖рд╛ рд╡рд╛рдкрд░рд╛
- рдордЬреЗрджрд╛рд░ рдмрдирд╡рдгреНрдпрд╛рд╕рд╛рдареА рдЗрдореЛрдЬреА рд╕рдорд╛рд╡рд┐рд╖реНрдЯ рдХрд░рд╛
- рд╕рдВрднрд╛рд╖рдг рдЪрд╛рд▓реВ рдареЗрд╡рдгреНрдпрд╛рд╕рд╛рдареА рдкреБрдвреАрд▓ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛
- рдЪреБрдХрд╛ рдзреИрд░реНрдпрд╛рдиреЗ рдпреЛрдЧреНрдп рдЙрджрд╛рд╣рд░рдг рджреЗрдКрди рджреБрд░реБрд╕реНрдд рдХрд░рд╛
- рддреНрдпрд╛рдВрдЪреНрдпрд╛ рдкреНрд░рдпрддреНрдирд╛рдВрдЪрд╛ рдЖрдгрд┐ рдкреНрд░рдЧрддреАрдЪрд╛ рдЙрддреНрд╕рд╡ рд╕рд╛рдЬрд░рд╛ рдХрд░рд╛

рддреБрдордЪреА рддрдЬреНрдЮрддрд╛:
- рдЗрдВрдЧреНрд░рдЬреА рд╡реНрдпрд╛рдХрд░рдг, рд╢рдмреНрджрд╕рдВрдЧреНрд░рд╣, рдЙрдЪреНрдЪрд╛рд░
- рд╡рдп-рдпреЛрдЧреНрдп рд╕реНрдкрд╖реНрдЯреАрдХрд░рдг
- рд╕рдВрднрд╛рд╖рдгрд╛рджреНрд╡рд╛рд░реЗ рдкрд░рд╕реНрдкрд░рд╕рдВрд╡рд╛рджреА рд╢рд┐рдХреНрд╖рдг
- рдЗрдВрдЧреНрд░рдЬреА рдмреЛрд▓рдгреНрдпрд╛рдд рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рд╡рд╛рдврд╡рдгреЗ

рдорд╣рддреНрд╡рд╛рдЪреЗ: рдиреЗрд╣рдореА рдорд░рд╛рдареАрдд рдЙрддреНрддрд░ рджреНрдпрд╛ рдкрдг рдЗрдВрдЧреНрд░рдЬреА рд╢рд┐рдХрд╡рдгреНрдпрд╛рд╡рд░ рд▓рдХреНрд╖ рдХреЗрдВрджреНрд░рд┐рдд рдХрд░рд╛. рдЙрддреНрддрд░ релреж рд╢рдмреНрджрд╛рдВрдд рдареЗрд╡рд╛ рдЖрдгрд┐ рдиреЗрд╣рдореА рдкреНрд░реЛрддреНрд╕рд╛рд╣рди рдХрд┐рдВрд╡рд╛ рдкреНрд░рд╢реНрдирд╛рдиреЗ рд╕рдВрдкрд╡рд╛.""",

            'gu': """ркдркорлЗ ркЬрлАркирлА ркЫрлЛ, рлм-рлзрлм рк╡рк░рлНрк╖ркирк╛ ркмрк╛рк│ркХрлЛ ркорк╛ркЯрлЗ ркорк┐ркдрлНрк░ркдрк╛рккрлВрк░рлНркг AI ркЕркВркЧрлНрк░рлЗркЬрлА рк╢рк┐ркХрлНрк╖ркХ.

ркдркорк╛рк░рлБркВ рк╡рлНркпркХрлНркдрк┐ркдрлНрк╡:
- рк╣ркВркорлЗрк╢рк╛ рк╕ркХрк╛рк░рк╛ркдрлНркоркХ, рккрлНрк░рлЛркдрлНрк╕рк╛рк╣ркирккрлВрк░рлНркг ркЕркирлЗ ркзрлИрк░рлНркпрк╡рк╛рки
- ркмрк╛рк│ркХрлЛ ркорк╛ркЯрлЗ ркпрлЛркЧрлНркп рк╕рк░рк│ ркнрк╛рк╖рк╛ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЛ
- ркоркЬрк╛ркжрк╛рк░ ркмркирк╛рк╡рк╡рк╛ ркорк╛ркЯрлЗ ркЗркорлЛркЬрлА рк╢рк╛ркорлЗрк▓ ркХрк░рлЛ
- рк╡рк╛ркдркЪрлАркд ркЪрк╛рк▓рлБ рк░рк╛ркЦрк╡рк╛ ркорк╛ркЯрлЗ ркЖркЧрк│ркирк╛ рккрлНрк░рк╢рлНркирлЛ рккрлВркЫрлЛ
- ркнрлВрк▓рлЛркирлЗ ркзрлИрк░рлНркпркерлА ркпрлЛркЧрлНркп ркЙркжрк╛рк╣рк░ркг ркЖрккрлАркирлЗ рк╕рлБркзрк╛рк░рлЛ
- ркдрлЗркоркирк╛ рккрлНрк░ркпркдрлНркирлЛ ркЕркирлЗ рккрлНрк░ркЧркдрк┐ркирлА ркЙркЬрк╡ркгрлА ркХрк░рлЛ

ркдркорк╛рк░рлА рк╡рк┐рк╢рлЗрк╖ркЬрлНркЮркдрк╛:
- ркЕркВркЧрлНрк░рлЗркЬрлА рк╡рлНркпрк╛ркХрк░ркг, рк╢ркмрлНркжркнркВркбрлЛрк│, ркЙркЪрлНркЪрк╛рк░
- рк╡ркп-ркпрлЛркЧрлНркп рк╕ркоркЬрлВркдрлА
- рк╡рк╛ркдркЪрлАркд ркжрлНрк╡рк╛рк░рк╛ ркЗркирлНркЯрк░рлЗркХрлНркЯрк┐рк╡ рк╢рлАркЦрк╡рлБркВ
- ркЕркВркЧрлНрк░рлЗркЬрлА ркмрлЛрк▓рк╡рк╛ркорк╛ркВ ркЖркдрлНркорк╡рк┐рк╢рлНрк╡рк╛рк╕ рк╡ркзрк╛рк░рк╡рлЛ

ркорк╣ркдрлНрк╡рккрлВрк░рлНркг: рк╣ркВркорлЗрк╢рк╛ ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ ркЬрк╡рк╛ркм ркЖрккрлЛ рккркг ркЕркВркЧрлНрк░рлЗркЬрлА рк╢рлАркЦрк╡рк╡рк╛ рккрк░ ркзрлНркпрк╛рки ркХрлЗркирлНркжрлНрк░рк┐ркд ркХрк░рлЛ. ркЬрк╡рк╛ркм рллрлж рк╢ркмрлНркжрлЛркорк╛ркВ рк░рк╛ркЦрлЛ ркЕркирлЗ рк╣ркВркорлЗрк╢рк╛ рккрлНрк░рлЛркдрлНрк╕рк╛рк╣рки ркЕркерк╡рк╛ рккрлНрк░рк╢рлНрки рк╕рк╛ркерлЗ рк╕ркорк╛рккрлНркд ркХрк░рлЛ.""",

            'ta': """роирпАроЩрпНроХро│рпН роЬрпАройро┐, 6-16 ро╡ропродрпБ роХрпБро┤роирпНродрпИроХро│рпБроХрпНроХро╛рой роироЯрпНрокро╛рой AI роЖроЩрпНроХро┐ро▓ роЖроЪро┐ро░ро┐ропро░рпН.

роЙроЩрпНроХро│рпН роЖро│рпБроорпИ:
- роОрокрпНрокрпЛродрпБроорпН роирпЗро░рпНрооро▒рпИропро╛рой, роКроХрпНроХрооро│ро┐роХрпНроХрпБроорпН рооро▒рпНро▒рпБроорпН рокрпКро▒рпБроорпИропро╛рой
- роХрпБро┤роирпНродрпИроХро│рпБроХрпНроХрпБ роПро▒рпНро▒ роОро│ро┐роп роорпКро┤ро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН
- ро╡рпЗроЯро┐роХрпНроХрпИропро╛роХ роЗро░рпБроХрпНроХ роОроорпЛроЬро┐роХро│рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН
- роЙро░рпИропро╛роЯро▓рпИродрпН родрпКроЯро░ рокро┐ройрпНродрпКроЯро░рпНродро▓рпН роХрпЗро│рпНро╡ро┐роХро│рпИроХрпН роХрпЗро│рпБроЩрпНроХро│рпН
- родро╡ро▒рпБроХро│рпИ рокрпКро▒рпБроорпИропро╛роХ роЪро░ро┐ропро╛рой роЙродро╛ро░рогроорпН роХрпКроЯрпБродрпНродрпБ родро┐ро░рпБродрпНродрпБроЩрпНроХро│рпН
- роЕро╡ро░рпНроХро│ро┐ройрпН роорпБропро▒рпНроЪро┐роХро│рпН рооро▒рпНро▒рпБроорпН роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИроХрпН роХрпКрогрпНроЯро╛роЯрпБроЩрпНроХро│рпН

роЙроЩрпНроХро│рпН роиро┐рокрпБрогродрпНродрпБро╡роорпН:
- роЖроЩрпНроХро┐ро▓ роЗро▓роХрпНроХрогроорпН, роЪрпКро▓рпНро▓роХро░ро╛родро┐, роЙроЪрпНроЪро░ро┐рокрпНрокрпБ
- ро╡ропродрпБроХрпНроХрпБ роПро▒рпНро▒ ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпН
- роЙро░рпИропро╛роЯро▓рпН роорпВро▓роорпН роКроЯро╛роЯрпБроорпН роХро▒рпНро▒ро▓рпН
- роЖроЩрпНроХро┐ро▓роорпН рокрпЗроЪрпБро╡родро┐ро▓рпН роироорпНрокро┐роХрпНроХрпИропрпИ ро╡ро│ро░рпНродрпНродро▓рпН

роорпБроХрпНроХро┐ропроорпН: роОрокрпНрокрпЛродрпБроорпН родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓рпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН роЖройро╛ро▓рпН роЖроЩрпНроХро┐ро▓роорпН роХро▒рпНрокро┐рокрпНрокродро┐ро▓рпН роХро╡ройроорпН роЪрпЖро▓рпБродрпНродрпБроЩрпНроХро│рпН. рокродро┐ро▓рпНроХро│рпИ 50 ро╡ро╛ро░рпНродрпНродрпИроХро│рпБроХрпНроХрпБро│рпН ро╡рпИродрпНродрпБ роОрокрпНрокрпЛродрпБроорпН роКроХрпНроХроорпН роЕро▓рпНро▓родрпБ роХрпЗро│рпНро╡ро┐ропрпБроЯройрпН роорпБроЯро┐роХрпНроХро╡рпБроорпН."""
        }
        
        self.roleplay_scenarios = {
            'school': {
                'context': "You are a friendly teacher at school. Keep responses simple and encouraging for children aged 6-16.",
                'prompts': [
                    "Good morning! What's your name?",
                    "Hi {name}! Do you like school?",
                    "What's your favorite subject?", 
                    "That's wonderful! Do you have many friends at school?",
                    "Great! You're doing amazing at this conversation! ЁЯМЯ"
                ]
            },
            'store': {
                'context': "You are a friendly shopkeeper. Help children practice shopping conversations.",
                'prompts': [
                    "Welcome to our store! What would you like to buy today?",
                    "Great choice! How many would you like?",
                    "Perfect! That will be 50 rupees. Do you have the money?",
                    "Thank you! Here's your change. Have a great day!"
                ]
            },
            'home': {
                'context': "You are having a friendly conversation about home and family.",
                'prompts': [
                    "Hi! Who do you live with at home?",
                    "That's nice! Do you help your family with chores?",
                    "What do you like to do at home for fun?",
                    "Sounds like you have a lovely home! ЁЯШК"
                ]
            },
            'playground': {
                'context': "You are a friendly child wanting to play and make friends.",
                'prompts': [
                    "Hi there! Do you want to play with me?",
                    "Awesome! What's your favorite game?",
                    "That sounds fun! Can you teach me how to play?",
                    "You're a great friend! Thanks for playing with me! ЁЯОЙ"
                ]
            }
        }
        
        self.language_codes = {
            'en': 'en',
            'hi': 'hi', 
            'mr': 'mr',
            'gu': 'gu',
            'ta': 'ta'
        }

    def get_gemini_model(self, language='en'):
        """Create a Gemini model with language-specific system instruction"""
        system_prompt = self.system_prompts.get(language, self.system_prompts['en'])
        
        return genai.GenerativeModel(
            model_name=GEMINI_MODEL_NAME,
            system_instruction=system_prompt
        )

    def get_ai_response(self, user_input, session_id, mode='chat', roleplay_type=None, step=0, language='en'):
        """Get AI response using Gemini with language support"""
        try:
            if session_id not in self.conversation_history:
                self.conversation_history[session_id] = {}
                
            # Store conversation per language to avoid mixing
            lang_key = f"{session_id}_{language}"
            if lang_key not in self.conversation_history:
                self.conversation_history[lang_key] = []

            if mode == 'roleplay' and roleplay_type:
                return self.handle_roleplay_response(user_input, session_id, roleplay_type, step, language)
            else:
                return self.handle_chat_response(user_input, lang_key, language)

        except Exception as e:
            logger.error(f"Error getting AI response: {e}")
            error_messages = {
                'en': "Sorry, I'm having trouble thinking right now. Can you try again? ЁЯШЕ",
                'hi': "рдорд╛рдл рдХрд░реЗрдВ, рдореБрдЭреЗ рдЕрднреА рд╕реЛрдЪрдиреЗ рдореЗрдВ рдкрд░реЗрд╢рд╛рдиреА рд╣реЛ рд░рд╣реА рд╣реИред рдХреНрдпрд╛ рдЖрдк рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ? ЁЯШЕ",
                'mr': "рдорд╛рдл рдХрд░рд╛, рдорд▓рд╛ рдЖрддреНрддрд╛ рд╡рд┐рдЪрд╛рд░ рдХрд░рдгреНрдпрд╛рдд рдЕрдбрдЪрдг рдпреЗрдд рдЖрд╣реЗ. рддреБрдореНрд╣реА рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░реВ рд╢рдХрддрд╛ рдХрд╛? ЁЯШЕ",
                'gu': "ркорк╛ркл ркХрк░рк╢рлЛ, ркоркирлЗ ркЕркдрлНркпрк╛рк░рлЗ рк╡рк┐ркЪрк╛рк░рк╡рк╛ркорк╛ркВ ркдркХрк▓рлАркл ркеркИ рк░рк╣рлА ркЫрлЗ. рк╢рлБркВ ркдркорлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлА рк╢ркХрлЛ ркЫрлЛ? ЁЯШЕ",
                'ta': "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роОройроХрпНроХрпБ роЗрокрпНрокрпЛродрпБ ропрпЛроЪро┐роХрпНроХ роЪро┐ро░роороорпН роЖроХро┐ро▒родрпБ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐ роЪрпЖропрпНроп роорпБроЯро┐ропрпБрооро╛? ЁЯШЕ"
            }
            return error_messages.get(language, error_messages['en'])

    def handle_chat_response(self, user_input, lang_key, language):
        """Handle free-form chat with AI tutor (Gemini) with language support"""
        try:
            # Add user message to history first
            self.conversation_history[lang_key].append({
                "role": "user",
                "content": user_input
            })

            # Get language-specific model
            model = self.get_gemini_model(language)

            # Build history for Gemini (excluding the just-added user input)
            prev_history = self.conversation_history[lang_key][:-1]
            gemini_history = []
            for m in prev_history[-10:]:  # Keep last 10 messages
                r = m.get("role")
                c = m.get("content", "")
                if r == "user":
                    gemini_history.append({"role": "user", "parts": [c]})
                elif r == "assistant":
                    gemini_history.append({"role": "model", "parts": [c]})

            # Add language context to the user input
            language_names = {
                'en': 'English',
                'hi': 'Hindi', 
                'mr': 'Marathi',
                'gu': 'Gujarati',
                'ta': 'Tamil'
            }
            
            enhanced_input = user_input
            if language != 'en':
                enhanced_input = f"[User is speaking in {language_names.get(language, 'local language')}. Please respond in {language_names.get(language, 'the same language')} while helping them learn English.] {user_input}"

            # Start chat and send message
            chat = model.start_chat(history=gemini_history)
            response = chat.send_message(enhanced_input)

            ai_response = (response.text or "").strip()
            if not ai_response:
                fallback_responses = {
                    'en': "That's interesting! Tell me more about that! ЁЯдФ",
                    'hi': "рдпрд╣ рджрд┐рд▓рдЪрд╕реНрдк рд╣реИ! рдореБрдЭреЗ рдЗрд╕рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдмрддрд╛рдПрдВ! ЁЯдФ",
                    'mr': "рд╣реЗ рдордиреЛрд░рдВрдЬрдХ рдЖрд╣реЗ! рдорд▓рд╛ рдпрд╛рдмрджреНрджрд▓ рдЕрдзрд┐рдХ рд╕рд╛рдВрдЧрд╛! ЁЯдФ", 
                    'gu': "ркЖ рк░рк╕рккрлНрк░ркж ркЫрлЗ! ркоркирлЗ ркЖ рк╡рк┐рк╢рлЗ рк╡ркзрлБ ркХрк╣рлЛ! ЁЯдФ",
                    'ta': "роЗродрпБ роЪрпБро╡ро╛ро░ро╕рпНропрооро╛ройродрпБ! роЗродрпИрокрпН рокро▒рпНро▒ро┐ роорпЗро▓рпБроорпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН! ЁЯдФ"
                }
                ai_response = fallback_responses.get(language, fallback_responses['en'])

            # Add AI response to our history
            self.conversation_history[lang_key].append({
                "role": "assistant", 
                "content": ai_response
            })

            return ai_response

        except Exception as e:
            logger.error(f"Error in chat response: {e}")
            fallback_responses = {
                'en': "That's interesting! Tell me more about that! ЁЯдФ",
                'hi': "рдпрд╣ рджрд┐рд▓рдЪрд╕реНрдк рд╣реИ! рдореБрдЭреЗ рдЗрд╕рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдмрддрд╛рдПрдВ! ЁЯдФ",
                'mr': "рд╣реЗ рдордиреЛрд░рдВрдЬрдХ рдЖрд╣реЗ! рдорд▓рд╛ рдпрд╛рдмрджреНрджрд▓ рдЕрдзрд┐рдХ рд╕рд╛рдВрдЧрд╛! ЁЯдФ",
                'gu': "ркЖ рк░рк╕рккрлНрк░ркж ркЫрлЗ! ркоркирлЗ ркЖ рк╡рк┐рк╢рлЗ рк╡ркзрлБ ркХрк╣рлЛ! ЁЯдФ", 
                'ta': "роЗродрпБ роЪрпБро╡ро╛ро░ро╕рпНропрооро╛ройродрпБ! роЗродрпИрокрпН рокро▒рпНро▒ро┐ роорпЗро▓рпБроорпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН! ЁЯдФ"
            }
            return fallback_responses.get(language, fallback_responses['en'])

    def handle_roleplay_response(self, user_input, session_id, roleplay_type, step, language='en'):
        """Handle roleplay scenario responses with multilingual support"""
        try:
            scenario = self.roleplay_scenarios.get(roleplay_type)
            if not scenario:
                responses = {
                    'en': "Let's try a different roleplay! ЁЯШК",
                    'hi': "рдЖрдЗрдП рдПрдХ рдЕрд▓рдЧ рд░реЛрд▓рдкреНрд▓реЗ рдХрд░рддреЗ рд╣реИрдВ! ЁЯШК", 
                    'mr': "рдЪрд▓рд╛ рд╡реЗрдЧрд│рд╛ рд░реЛрд▓рдкреНрд▓реЗ рдХрд░реВрдпрд╛! ЁЯШК",
                    'gu': "ркЪрк╛рк▓рлЛ ркЕрк▓ркЧ рк░рлЛрк▓рккрлНрк▓рлЗ ркХрк░рлАркП! ЁЯШК",
                    'ta': "ро╡рпЗро▒рпБ ро░рпЛро▓рпНрокрпНро│рпЗ роЪрпЖропрпНро╡рпЛроорпН! ЁЯШК"
                }
                return responses.get(language, responses['en'])

            if step < len(scenario['prompts']):
                # For roleplay, we'll translate the English prompts
                response = scenario['prompts'][step]
                
                # Add acknowledgment if not first step
                if step > 0 and user_input:
                    acknowledgments = {
                        'en': ["Great answer! ", "Wonderful! ", "Perfect! ", "Excellent! ", "Nice! "],
                        'hi': ["рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ рдЬрд╡рд╛рдм! ", "рд╢рд╛рдирджрд╛рд░! ", "рдкрд░рдлреЗрдХреНрдЯ! ", "рдЙрддреНрдХреГрд╖реНрдЯ! ", "рдЕрдЪреНрдЫрд╛! "],
                        'mr': ["рдЙрддреНрддрдо рдЙрддреНрддрд░! ", "рдЫрд╛рди! ", "рдкрд░рдлреЗрдХреНрдЯ! ", "рдЙрддреНрдХреГрд╖реНрдЯ! ", "рдмрд░реЗ! "],
                        'gu': ["ркЙркдрлНркдрко ркЬрк╡рк╛ркм! ", "ркЕркжрлНркнрлБркд! ", "рккрк░рклрлЗркХрлНркЯ! ", "ркЙркдрлНркХрлГрк╖рлНркЯ! ", "рк╕рк░рк╕! "],
                        'ta': ["роЕро░рпБроорпИропро╛рой рокродро┐ро▓рпН! ", "роЕро▒рпНрокрпБродроорпН! ", "роЪро░ро┐ропро╛ройродрпБ! ", "роЪро┐ро▒роирпНродродрпБ! ", "роиро▓рпНро▓родрпБ! "]
                    }
                    import random
                    ack_list = acknowledgments.get(language, acknowledgments['en'])
                    ack = random.choice(ack_list)
                    response = ack + response
                    
                # Translate response if needed (basic translation for demo)
                if language != 'en':
                    response = self.translate_roleplay_response(response, language)
                    
                return response
            else:
                completion_messages = {
                    'en': "ЁЯОЙ Fantastic! You completed this roleplay perfectly! You're getting better at English every day! ЁЯМЯ",
                    'hi': "ЁЯОЙ рд╢рд╛рдирджрд╛рд░! рдЖрдкрдиреЗ рдпрд╣ рд░реЛрд▓рдкреНрд▓реЗ рдмрд┐рд▓реНрдХреБрд▓ рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рдкреВрд░рд╛ рдХрд┐рдпрд╛! рдЖрдк рд╣рд░ рджрд┐рди рдЕрдВрдЧреНрд░реЗрдЬреА рдореЗрдВ рдмреЗрд╣рддрд░ рд╣реЛ рд░рд╣реЗ рд╣реИрдВ! ЁЯМЯ",
                    'mr': "ЁЯОЙ рдлрдБрдЯрд╛рд╕реНрдЯрд┐рдХ! рддреБрдореНрд╣реА рд╣рд╛ рд░реЛрд▓рдкреНрд▓реЗ рдЕрдЧрджреА рдмрд░реЛрдмрд░ рдкреВрд░реНрдг рдХреЗрд▓рд╛! рддреБрдореНрд╣реА рджрд░рд░реЛрдЬ рдЗрдВрдЧреНрд░рдЬреАрдд рдЪрд╛рдВрдЧрд▓реЗ рд╣реЛрдд рдЖрд╣рд╛рдд! ЁЯМЯ",
                    'gu': "ЁЯОЙ рклрлЗркирлНркЯрк╛рк╕рлНркЯрк┐ркХ! ркдркорлЗ ркЖ рк░рлЛрк▓рккрлНрк▓рлЗ рк╕ркВрккрлВрк░рлНркг рк░рлАркдрлЗ рккрлВрк░рлЛ ркХрк░рлНркпрлЛ! ркдркорлЗ ркжрк░рк░рлЛркЬ ркЕркВркЧрлНрк░рлЗркЬрлАркорк╛ркВ рк╕рк╛рк░рк╛ ркеркИ рк░рк╣рлНркпрк╛ ркЫрлЛ! ЁЯМЯ",
                    'ta': "ЁЯОЙ роЕро░рпБроорпИ! роЗроирпНрод ро░рпЛро▓рпНрокрпНро│рпЗро╡рпИ роирпАроЩрпНроХро│рпН роЪро░ро┐ропро╛роХ роорпБроЯро┐родрпНродрпАро░рпНроХро│рпН! роирпАроЩрпНроХро│рпН роТро╡рпНро╡рпКро░рпБ роиро╛ро│рпБроорпН роЖроЩрпНроХро┐ро▓родрпНродро┐ро▓рпН роЪро┐ро▒рокрпНрокро╛роХро┐ ро╡ро░рпБроХро┐ро▒рпАро░рпНроХро│рпН! ЁЯМЯ"
                }
                return completion_messages.get(language, completion_messages['en'])

        except Exception as e:
            logger.error(f"Error in roleplay response: {e}")
            fallback_responses = {
                'en': "Great job! Let's continue our roleplay! ЁЯШК",
                'hi': "рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдЖрдЗрдП рдЕрдкрдирд╛ рд░реЛрд▓рдкреНрд▓реЗ рдЬрд╛рд░реА рд░рдЦрддреЗ рд╣реИрдВ! ЁЯШК",
                'mr': "рдЫрд╛рди рдХрд╛рдо! рдЪрд▓рд╛ рдЖрдкрд▓рд╛ рд░реЛрд▓рдкреНрд▓реЗ рд╕реБрд░реВ рдареЗрд╡реВрдпрд╛! ЁЯШК", 
                'gu': "рк╕рк░рк╕ ркХрк╛рко! ркЖрккркгрлЛ рк░рлЛрк▓рккрлНрк▓рлЗ ркЪрк╛рк▓рлБ рк░рк╛ркЦрлАркП! ЁЯШК",
                'ta': "роиро▓рпНро▓родрпБ! роироородрпБ ро░рпЛро▓рпНрокрпНро│рпЗро╡рпИродрпН родрпКроЯро░рпНро╡рпЛроорпН! ЁЯШК"
            }
            return fallback_responses.get(language, fallback_responses['en'])

    def translate_roleplay_response(self, text, language):
        """Basic translation for roleplay responses"""
        # This is a simplified translation - in production, use proper translation API
        translations = {
            'hi': {
                "Good morning! What's your name?": "рд╕реБрдкреНрд░рднрд╛рдд! рдЖрдкрдХрд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?",
                "Do you like school?": "рдХреНрдпрд╛ рдЖрдкрдХреЛ рд╕реНрдХреВрд▓ рдкрд╕рдВрдж рд╣реИ?",
                "What's your favorite subject?": "рдЖрдкрдХрд╛ рдкрд╕рдВрджреАрджрд╛ рд╡рд┐рд╖рдп рдХреНрдпрд╛ рд╣реИ?",
                "Welcome to our store! What would you like to buy today?": "рд╣рдорд╛рд░реА рджреБрдХрд╛рди рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдЖрдЬ рдЖрдк рдХреНрдпрд╛ рдЦрд░реАрджрдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
                "Great choice! How many would you like?": "рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рд╡рд┐рдХрд▓реНрдк! рдЖрдк рдХрд┐рддрдиреЗ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
                "Hi! Who do you live with at home?": "рдирдорд╕реНрддреЗ! рдЖрдк рдШрд░ рдкрд░ рдХрд┐рд╕рдХреЗ рд╕рд╛рде рд░рд╣рддреЗ рд╣реИрдВ?",
                "Hi there! Do you want to play with me?": "рдирдорд╕реНрддреЗ! рдХреНрдпрд╛ рдЖрдк рдореЗрд░реЗ рд╕рд╛рде рдЦреЗрд▓рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"
            },
            'mr': {
                "Good morning! What's your name?": "рд╕реБрдкреНрд░рднрд╛рдд! рддреБрдордЪреЗ рдирд╛рд╡ рдХрд╛рдп?",
                "Do you like school?": "рддреБрдореНрд╣рд╛рд▓рд╛ рд╢рд╛рд│рд╛ рдЖрд╡рдбрддреЗ рдХрд╛?",
                "What's your favorite subject?": "рддреБрдордЪрд╛ рдЖрд╡рдбрддрд╛ рд╡рд┐рд╖рдп рдХреЛрдгрддрд╛?",
                "Welcome to our store! What would you like to buy today?": "рдЖрдордЪреНрдпрд╛ рджреБрдХрд╛рдирд╛рдд рддреБрдордЪреЗ рд╕реНрд╡рд╛рдЧрдд! рдЖрдЬ рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╛рдп рд╡рд┐рдХрдд рдШреНрдпрд╛рдпрдЪреЗ рдЖрд╣реЗ?",
                "Great choice! How many would you like?": "рдЪрд╛рдВрдЧрд▓реА рдирд┐рд╡рдб! рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд┐рддреА рд╣рд╡реЗрдд?",
                "Hi! Who do you live with at home?": "рдирдорд╕реНрдХрд╛рд░! рддреБрдореНрд╣реА рдШрд░реА рдХреЛрдгрд╛рд╕реЛрдмрдд рд░рд╛рд╣рддрд╛?",
                "Hi there! Do you want to play with me?": "рдирдорд╕реНрдХрд╛рд░! рддреБрдореНрд╣рд╛рд▓рд╛ рдорд╛рдЭреНрдпрд╛рд╕реЛрдмрдд рдЦреЗрд│рд╛рдпрдЪреЗ рдЖрд╣реЗ рдХрд╛?"
            }
            # Add more translations as needed
        }
        
        lang_translations = translations.get(language, {})
        return lang_translations.get(text, text)

    def transcribe_audio(self, audio_data):
        """Transcribe audio to text using speech recognition"""
        try:
            r = sr.Recognizer()
            audio = AudioSegment.from_wav(io.BytesIO(audio_data))
            wav_io = io.BytesIO()
            audio.export(wav_io, format="wav")
            wav_io.seek(0)
            
            with sr.AudioFile(wav_io) as source:
                audio_data = r.record(source)
                text = r.recognize_google(audio_data)
                return text
        except sr.UnknownValueError:
            return "Sorry, I couldn't understand what you said. Please try speaking clearly! ЁЯШЕ"
        except sr.RequestError as e:
            logger.error(f"Speech recognition error: {e}")
            return "I'm having trouble hearing you. Please try again! ЁЯОд"
        except Exception as e:
            logger.error(f"Audio transcription error: {e}")
            return "Sorry, there was an issue processing your voice. Please try again! ЁЯШЕ"

    def text_to_speech(self, text, language='en'):
        """Convert text to speech using gTTS"""
        try:
            import re
            clean_text = re.sub(r'[^\w\s\.,!?]', '', text)
            tts = gTTS(text=clean_text, lang=language, slow=False)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                tts.save(tmp_file.name)
                return tmp_file.name
        except Exception as e:
            logger.error(f"TTS error: {e}")
            return None

# Initialize AI assistant
ai_assistant = SpeakGenieAI()

@app.route('/')
def index():
    """Serve the main application"""
    return render_template("index.html")

@app.route('/api/chat', methods=['POST'])
def chat():
    """Handle chat messages with language support"""
    try:
        data = request.json
        user_input = data.get('message', '')
        session_id = data.get('session_id', 'default')
        language = data.get('language', 'en')
        
        if not user_input:
            return jsonify({'error': 'No message provided'}), 400
        
        # Get AI response with language support
        ai_response = ai_assistant.get_ai_response(user_input, session_id, language=language)
        
        # Generate TTS
        audio_file = ai_assistant.text_to_speech(ai_response, language)
        
        return jsonify({
            'response': ai_response,
            'audio_available': audio_file is not None,
            'audio_url': f'/api/audio/{os.path.basename(audio_file)}' if audio_file else None
        })
        
    except Exception as e:
        logger.error(f"Chat error: {e}")
        return jsonify({'error': 'Failed to process chat message'}), 500



@app.route('/api/roleplay', methods=['POST'])
def roleplay():
    """Handle roleplay interactions"""
    try:
        data = request.json
        user_input = data.get('message', '')
        session_id = data.get('session_id', 'default')
        roleplay_type = data.get('roleplay_type', '')
        step = data.get('step', 0)
        language = data.get('language', 'en')
        
        # Get AI response for roleplay (local scripted)
        ai_response = ai_assistant.get_ai_response(
            user_input, session_id, mode='roleplay', 
            roleplay_type=roleplay_type, step=step
        )
        
        # Generate TTS
        audio_file = ai_assistant.text_to_speech(ai_response, language)
        
        return jsonify({
            'response': ai_response,
            'next_step': step + 1,
            'audio_available': audio_file is not None,
            'audio_url': f'/api/audio/{os.path.basename(audio_file)}' if audio_file else None
        })
        
    except Exception as e:
        logger.error(f"Roleplay error: {e}")
        return jsonify({'error': 'Failed to process roleplay'}), 500

@app.route('/api/transcribe', methods=['POST'])
def transcribe_audio():
    """Transcribe uploaded audio to text"""
    try:
        if 'audio' not in request.files:
            return jsonify({'error': 'No audio file provided'}), 400
        
        audio_file = request.files['audio']
        audio_data = audio_file.read()
        
        # Transcribe audio
        transcript = ai_assistant.transcribe_audio(audio_data)
        
        return jsonify({
            'transcript': transcript,
            'success': True
        })
        
    except Exception as e:
        logger.error(f"Transcription error: {e}")
        return jsonify({'error': 'Failed to transcribe audio'}), 500

@app.route('/api/audio/<filename>')
def serve_audio(filename):
    """Serve generated audio files"""
    try:
        audio_path = os.path.join(tempfile.gettempdir(), filename)
        if os.path.exists(audio_path):
            return send_file(audio_path, mimetype='audio/mpeg')
        else:
            return jsonify({'error': 'Audio file not found'}), 404
    except Exception as e:
        logger.error(f"Audio serving error: {e}")
        return jsonify({'error': 'Failed to serve audio'}), 500

@app.route('/api/clear_history', methods=['POST'])
def clear_history():
    """Clear conversation history for a session"""
    try:
        data = request.json
        session_id = data.get('session_id', 'default')
        
        if session_id in ai_assistant.conversation_history:
            del ai_assistant.conversation_history[session_id]
        
        return jsonify({'success': True, 'message': 'History cleared'})
        
    except Exception as e:
        logger.error(f"Clear history error: {e}")
        return jsonify({'error': 'Failed to clear history'}), 500
if __name__ == '__main__':
    # Make sure to install required dependencies first:
    # pip install flask flask-cors google-generativeai gtts SpeechRecognition pydub
    print("ЁЯзЮтАНтЩВя╕П Starting SpeakGenie AI Voice Tutor (Gemini)...")
    print("ЁЯУЭ Set your GEMINI_API_KEY environment variable.")
    print("ЁЯМР Server will run at http://localhost:5000")
    app.run(debug=True, host='0.0.0.0', port=10000)
